{"version":3,"sources":["../../../src/lib/inlineCodeBlock.ts"],"names":[],"mappings":";;;AAAA,IAAM,GAAA,GAAM,MAAO,CAAA,YAAA,CAAa,IAAI,CAAA;AAM7B,SAAS,gBAAkC,OAAwB,EAAA;AAEzE,EAAU,OAAA,GAAA,OAAA,CAAQ,OAAQ,CAAA,IAAA,EAAM,MAAQ,CAAA;AAGxC,EAAA,OAAA,GAAU,OAAQ,CAAA,OAAA,CAAQ,IAAM,EAAA,CAAA,EAAA,EAAK,GAAG,CAAE,CAAA,CAAA;AAG1C,EAAA,OAAO,KAAK,OAAO,CAAA,EAAA,CAAA;AACpB;AATgB,MAAA,CAAA,eAAA,EAAA,iBAAA,CAAA","file":"inlineCodeBlock.mjs","sourcesContent":["const zws = String.fromCharCode(8203);\n\n/**\n * Wraps text in a markdown inline codeblock\n * @param content The expression to be wrapped in the codeblock\n */\nexport function inlineCodeBlock<C extends string>(content: C): `\\`${C}\\`` {\n\t// Replace spaces with non-breaking spaces\n\tcontent = content.replace(/ /g, '\\u00A0') as C;\n\n\t// Replace backticks with zero-width-space escaped backticks\n\tcontent = content.replace(/`/g, `\\`${zws}`) as C;\n\n\t// Return the input wrapped in backticks\n\treturn `\\`${content}\\``;\n}\n"]}