{"version":3,"sources":["../../../src/lib/hasAtLeastOneKeyInObject.ts"],"names":[],"mappings":";;;AAeO,SAAS,wBAAA,CAAkE,KAAQ,IAA0D,EAAA;AACnJ,EAAA,OAAO,CAAC,SAAA,CAAU,GAAG,CAAA,IAAK,IAAK,CAAA,IAAA,CAAK,CAAC,GAAA,KAAQ,MAAO,CAAA,MAAA,CAAO,GAAK,EAAA,GAAG,CAAC,CAAA;AACrE;AAFgB,MAAA,CAAA,wBAAA,EAAA,0BAAA,CAAA","file":"hasAtLeastOneKeyInObject.mjs","sourcesContent":["import { isNullish } from './isNullOrUndefined';\n\n/**\n * Checks whether any of the {@link keys} are in the {@link obj}\n * @param obj - The object to check\n * @param keys The keys to find in the object\n * @returns `true` if at least one of the {@link keys} is in the {@link obj}, `false` otherwise.\n *\n * @example\n * ```typescript\n * const obj = { a: 1, b: 2, c: 3 };\n * console.log(hasAtLeastOneKeyInObject(obj, ['a'])); // true\n * console.log(hasAtLeastOneKeyInObject(obj, ['d'])); // false\n * ```\n */\nexport function hasAtLeastOneKeyInObject<T extends object, K extends PropertyKey>(obj: T, keys: readonly K[]): obj is T & { [key in K]-?: unknown } {\n\treturn !isNullish(obj) && keys.some((key) => Object.hasOwn(obj, key));\n}\n"]}