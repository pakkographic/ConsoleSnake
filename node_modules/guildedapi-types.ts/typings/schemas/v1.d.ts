export interface paths {
    "/channels/{channelId}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ChannelMessageReadMany"];
        put?: never;
        post: operations["ChannelMessageCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/messages/{messageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ChannelMessageRead"];
        put: operations["ChannelMessageUpdate"];
        post?: never;
        delete: operations["ChannelMessageDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{groupId}/members/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["GroupMembershipCreate"];
        post?: never;
        delete: operations["GroupMembershipDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/members/{userId}/xp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["ServerXpForUserUpdate"];
        post: operations["ServerXpForUserCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/xp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["ServerXpForUserUpdateMany"];
        post: operations["ServerXpForUserCreateMany"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/roles/{roleId}/xp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ServerXpForRoleCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/members/{userId}/roles/{roleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["RoleMembershipCreate"];
        post?: never;
        delete: operations["RoleMembershipDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/members/{userId}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["RoleMembershipReadMany"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/topics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ForumTopicReadMany"];
        put?: never;
        post: operations["ForumTopicCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/topics/{forumTopicId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ForumTopicRead"];
        put?: never;
        post?: never;
        delete: operations["ForumTopicDelete"];
        options?: never;
        head?: never;
        patch: operations["ForumTopicUpdate"];
        trace?: never;
    };
    "/channels/{channelId}/topics/{forumTopicId}/pin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["ForumTopicPin"];
        post?: never;
        delete: operations["ForumTopicUnpin"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/topics/{forumTopicId}/emotes/{emoteId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["ForumTopicReactionCreate"];
        post?: never;
        delete: operations["ForumTopicReactionDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/topics/{forumTopicId}/lock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["ForumTopicLock"];
        post?: never;
        delete: operations["ForumTopicUnlock"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/topics/{forumTopicId}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ForumTopicCommentReadMany"];
        put?: never;
        post: operations["ForumTopicCommentCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/topics/{forumTopicId}/comments/{forumTopicCommentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ForumTopicCommentRead"];
        put?: never;
        post?: never;
        delete: operations["ForumTopicCommentDelete"];
        options?: never;
        head?: never;
        patch: operations["ForumTopicCommentUpdate"];
        trace?: never;
    };
    "/channels/{channelId}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ListItemReadMany"];
        put?: never;
        post: operations["ListItemCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/items/{listItemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ListItemRead"];
        put?: never;
        post?: never;
        delete: operations["ListItemDelete"];
        options?: never;
        head?: never;
        patch: operations["ListItemUpdate"];
        trace?: never;
    };
    "/channels/{channelId}/items/{listItemId}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ListItemCompleteCreate"];
        delete: operations["ListItemCompleteDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/members/{userId}/social-links/{socialLinkType}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MemberSocialLinkRead"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/members/{userId}/nickname": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["MemberNicknameUpdate"];
        post?: never;
        delete: operations["MemberNicknameDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ChannelCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ChannelRead"];
        put?: never;
        post?: never;
        delete: operations["ChannelDelete"];
        options?: never;
        head?: never;
        patch: operations["ChannelUpdate"];
        trace?: never;
    };
    "/channels/{channelId}/docs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["DocReadMany"];
        put?: never;
        post: operations["DocCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/docs/{docId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["DocRead"];
        put: operations["DocUpdate"];
        post?: never;
        delete: operations["DocDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/members/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ServerMemberRead"];
        put?: never;
        post?: never;
        delete: operations["ServerMemberDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ServerMemberReadMany"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/bans/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ServerMemberBanRead"];
        put?: never;
        post: operations["ServerMemberBanCreate"];
        delete: operations["ServerMemberBanDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/bans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ServerMemberBanReadMany"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/webhooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["WebhookReadMany"];
        put?: never;
        post: operations["WebhookCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/webhooks/{webhookId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["WebhookRead"];
        put: operations["WebhookUpdate"];
        post?: never;
        delete: operations["WebhookDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ServerRead"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CalendarEventReadMany"];
        put?: never;
        post: operations["CalendarEventCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/events/{calendarEventId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CalendarEventRead"];
        put?: never;
        post?: never;
        delete: operations["CalendarEventDelete"];
        options?: never;
        head?: never;
        patch: operations["CalendarEventUpdate"];
        trace?: never;
    };
    "/channels/{channelId}/events/{calendarEventId}/rsvps/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CalendarEventRsvpRead"];
        put: operations["CalendarEventRsvpUpdate"];
        post?: never;
        delete: operations["CalendarEventRsvpDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/events/{calendarEventId}/rsvps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CalendarEventRsvpReadMany"];
        put: operations["CalendarEventRsvpUpdateMany"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserRead"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/topics/{forumTopicId}/comments/{forumTopicCommentId}/emotes/{emoteId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["ForumTopicCommentReactionCreate"];
        post?: never;
        delete: operations["ForumTopicCommentReactionDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/events/{calendarEventId}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CalendarEventCommentReadMany"];
        put?: never;
        post: operations["CalendarEventCommentCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/events/{calendarEventId}/comments/{calendarEventCommentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CalendarEventCommentRead"];
        put?: never;
        post?: never;
        delete: operations["CalendarEventCommentDelete"];
        options?: never;
        head?: never;
        patch: operations["CalendarEventCommentUpdate"];
        trace?: never;
    };
    "/channels/{channelId}/events/{calendarEventId}/emotes/{emoteId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["CalendarEventReactionCreate"];
        post?: never;
        delete: operations["CalendarEventReactionDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/events/{calendarEventId}/comments/{calendarEventCommentId}/emotes/{emoteId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["CalendarEventCommentReactionCreate"];
        post?: never;
        delete: operations["CalendarEventCommentReactionDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/docs/{docId}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["DocCommentReadMany"];
        put?: never;
        post: operations["DocCommentCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/docs/{docId}/comments/{docCommentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["DocCommentRead"];
        put?: never;
        post?: never;
        delete: operations["DocCommentDelete"];
        options?: never;
        head?: never;
        patch: operations["DocCommentUpdate"];
        trace?: never;
    };
    "/channels/{channelId}/docs/{docId}/emotes/{emoteId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["DocReactionCreate"];
        post?: never;
        delete: operations["DocReactionDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/docs/{docId}/comments/{docCommentId}/emotes/{emoteId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["DocCommentReactionCreate"];
        post?: never;
        delete: operations["DocCommentReactionDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/event_series/{calendarEventSeriesId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["CalendarEventSeriesDelete"];
        options?: never;
        head?: never;
        patch: operations["CalendarEventSeriesUpdate"];
        trace?: never;
    };
    "/channels/{channelId}/announcements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AnnouncementReadMany"];
        put?: never;
        post: operations["AnnouncementCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/announcements/{announcementId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AnnouncementRead"];
        put?: never;
        post?: never;
        delete: operations["AnnouncementDelete"];
        options?: never;
        head?: never;
        patch: operations["AnnouncementUpdate"];
        trace?: never;
    };
    "/users/{userId}/servers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserServerReadMany"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/announcements/{announcementId}/emotes/{emoteId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["AnnouncementReactionCreate"];
        post?: never;
        delete: operations["AnnouncementReactionDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/announcements/{announcementId}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AnnouncementCommentReadMany"];
        put?: never;
        post: operations["AnnouncementCommentCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/announcements/{announcementId}/comments/{announcementCommentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AnnouncementCommentRead"];
        put?: never;
        post?: never;
        delete: operations["AnnouncementCommentDelete"];
        options?: never;
        head?: never;
        patch: operations["AnnouncementCommentUpdate"];
        trace?: never;
    };
    "/channels/{channelId}/announcements/{announcementId}/comments/{announcementCommentId}/emotes/{emoteId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["AnnouncementCommentReactionCreate"];
        post?: never;
        delete: operations["AnnouncementCommentReactionDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["UserStatusCreate"];
        post?: never;
        delete: operations["UserStatusDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/messages/{messageId}/emotes/{emoteId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["ChannelMessageReactionCreate"];
        post?: never;
        delete: operations["ChannelMessageReactionDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/messages/{messageId}/emotes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["ChannelMessageReactionDeleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GroupReadMany"];
        put?: never;
        post: operations["GroupCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/groups/{groupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GroupRead"];
        put?: never;
        post?: never;
        delete: operations["GroupDelete"];
        options?: never;
        head?: never;
        patch: operations["GroupUpdate"];
        trace?: never;
    };
    "/servers/{serverId}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["RoleReadMany"];
        put?: never;
        post: operations["RoleCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/roles/{roleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["RoleRead"];
        put?: never;
        post?: never;
        delete: operations["RoleDelete"];
        options?: never;
        head?: never;
        patch: operations["RoleUpdate"];
        trace?: never;
    };
    "/servers/{serverId}/roles/{roleId}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["RolePermissionUpdate"];
        trace?: never;
    };
    "/servers/{serverId}/subscriptions/tiers/{serverSubscriptionTierType}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ServerSubscriptionTierRead"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/subscriptions/tiers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ServerSubscriptionTierReadMany"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/members/{userId}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ServerMemberPermissionsRead"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channelId}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["ChannelArchiveCreate"];
        post?: never;
        delete: operations["ChannelArchiveDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["CategoryCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/categories/{categoryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CategoryRead"];
        put?: never;
        post?: never;
        delete: operations["CategoryDelete"];
        options?: never;
        head?: never;
        patch: operations["CategoryUpdate"];
        trace?: never;
    };
    "/channels/{channelId}/messages/{messageId}/pin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ChannelMessagePinCreate"];
        delete: operations["ChannelMessagePinDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/channels/{channelId}/permissions/roles/{roleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ChannelRolePermissionRead"];
        put?: never;
        post: operations["ChannelRolePermissionCreate"];
        delete: operations["ChannelRolePermissionDelete"];
        options?: never;
        head?: never;
        patch: operations["ChannelRolePermissionUpdate"];
        trace?: never;
    };
    "/servers/{serverId}/channels/{channelId}/permissions/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ChannelRolePermissionReadMany"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/channels/{channelId}/permissions/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ChannelUserPermissionRead"];
        put?: never;
        post: operations["ChannelUserPermissionCreate"];
        delete: operations["ChannelUserPermissionDelete"];
        options?: never;
        head?: never;
        patch: operations["ChannelUserPermissionUpdate"];
        trace?: never;
    };
    "/servers/{serverId}/channels/{channelId}/permissions/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ChannelUserPermissionReadMany"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/categories/{categoryId}/permissions/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ChannelCategoryUserPermissionRead"];
        put?: never;
        post: operations["ChannelCategoryUserPermissionCreate"];
        delete: operations["ChannelCategoryUserPermissionDelete"];
        options?: never;
        head?: never;
        patch: operations["ChannelCategoryUserPermissionUpdate"];
        trace?: never;
    };
    "/servers/{serverId}/categories/{categoryId}/permissions/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ChannelCategoryUserPermissionReadMany"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/categories/{categoryId}/permissions/roles/{roleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ChannelCategoryRolePermissionRead"];
        put?: never;
        post: operations["ChannelCategoryRolePermissionCreate"];
        delete: operations["ChannelCategoryRolePermissionDelete"];
        options?: never;
        head?: never;
        patch: operations["ChannelCategoryRolePermissionUpdate"];
        trace?: never;
    };
    "/servers/{serverId}/categories/{categoryId}/permissions/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ChannelCategoryRolePermissionReadMany"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/url-signatures": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UrlSignatureCreateMany"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ChatMessage: {
            id: string;
            type: ChatMessageType;
            serverId?: string;
            groupId?: string;
            channelId: string;
            content?: string;
            hiddenLinkPreviewUrls?: string[];
            embeds?: components["schemas"]["ChatEmbed"][];
            replyMessageIds?: string[];
            isPrivate?: boolean;
            isSilent: boolean;
            isPinned: boolean;
            mentions?: components["schemas"]["Mentions"];
            createdAt: string;
            createdBy: string;
            createdByWebhookId?: string;
            updatedAt?: string;
        };
        ChatMessageReaction: {
            channelId: string;
            createdBy: string;
            emote: components["schemas"]["Emote"];
            messageId: string;
        };
        ChatEmbed: {
            title?: string;
            description?: string;
            url?: string;
            color?: number;
            footer?: {
                icon_url?: string;
                text: string;
            };
            timestamp?: string;
            thumbnail?: {
                url?: string;
            };
            image?: {
                url?: string;
            };
            author?: {
                name?: string;
                url?: string;
                icon_url?: string;
            };
            fields?: {
                name: string;
                value: string;
                inline: boolean;
            }[];
        };
        SocialLink: {
            type: SocialLinkType;
            userId: string;
            handle?: string;
            serviceId?: string;
            createdAt: string;
        };
        Mentions: {
            users?: {
                id: string;
            }[];
            channels?: {
                id: string;
            }[];
            roles?: {
                id: number;
            }[];
            everyone?: boolean;
            here?: boolean;
        };
        ForumTopicComment: {
            id: number;
            content: string;
            createdAt: string;
            updatedAt?: string;
            channelId: string;
            forumTopicId: number;
            createdBy: string;
            mentions?: components["schemas"]["Mentions"];
        };
        ForumTopicReaction: {
            channelId: string;
            createdBy: string;
            emote: components["schemas"]["Emote"];
            forumTopicId: number;
        };
        ForumTopicCommentReaction: {
            channelId: string;
            createdBy: string;
            emote: components["schemas"]["Emote"];
            forumTopicId: number;
            forumTopicCommentId: number;
        };
        ForumTopic: {
            id: number;
            serverId: string;
            groupId: string;
            channelId: string;
            title: string;
            createdAt: string;
            createdBy: string;
            updatedAt?: string;
            bumpedAt?: string;
            isPinned: boolean;
            isLocked: boolean;
            content: string;
            mentions?: components["schemas"]["Mentions"];
        };
        ForumTopicSummary: {
            id: number;
            serverId: string;
            groupId: string;
            channelId: string;
            title: string;
            createdAt: string;
            createdBy: string;
            updatedAt?: string;
            bumpedAt?: string;
            isPinned: boolean;
            isLocked: boolean;
        };
        ListItem: {
            id: string;
            serverId: string;
            groupId: string;
            channelId: string;
            message: string;
            mentions?: components["schemas"]["Mentions"];
            createdAt: string;
            createdBy: string;
            createdByWebhookId?: string;
            updatedAt?: string;
            updatedBy?: string;
            parentListItemId?: string;
            completedAt?: string;
            completedBy?: string;
            note?: {
                createdAt: string;
                createdBy: string;
                updatedAt?: string;
                updatedBy?: string;
                mentions?: components["schemas"]["Mentions"];
                content: string;
            };
        };
        ListItemSummary: {
            id: string;
            serverId: string;
            channelId: string;
            message: string;
            mentions?: components["schemas"]["Mentions"];
            createdAt: string;
            createdBy: string;
            createdByWebhookId?: string;
            updatedAt?: string;
            updatedBy?: string;
            parentListItemId?: string;
            completedAt?: string;
            completedBy?: string;
            note?: {
                createdAt: string;
                createdBy: string;
                updatedAt?: string;
                updatedBy?: string;
            };
        };
        Doc: {
            id: number;
            serverId: string;
            groupId: string;
            channelId: string;
            title: string;
            content: string;
            mentions?: components["schemas"]["Mentions"];
            createdAt: string;
            createdBy: string;
            updatedAt?: string;
            updatedBy?: string;
        };
        DocComment: {
            id: number;
            content: string;
            createdAt: string;
            createdBy: string;
            updatedAt?: string;
            channelId: string;
            docId: number;
            mentions?: components["schemas"]["Mentions"];
        };
        DocReaction: {
            channelId: string;
            createdBy: string;
            emote: components["schemas"]["Emote"];
            docId: number;
        };
        DocCommentReaction: {
            channelId: string;
            createdBy: string;
            emote: components["schemas"]["Emote"];
            docId: number;
            docCommentId: number;
        };
        ServerMember: {
            user: components["schemas"]["User"];
            roleIds: number[];
            nickname?: string;
            joinedAt: string;
            isOwner: boolean;
        };
        ServerMemberSummary: {
            user: components["schemas"]["UserSummary"];
            roleIds: number[];
        };
        User: {
            id: string;
            type?: UserType;
            name: string;
            avatar?: string;
            banner?: string;
            createdAt: string;
            status?: components["schemas"]["UserStatus"];
        };
        UserSummary: {
            id: string;
            type?: UserSummaryType;
            name: string;
            avatar?: string;
        };
        ServerMemberBan: {
            user: components["schemas"]["UserSummary"];
            reason?: string;
            createdBy: string;
            createdAt: string;
        };
        ServerChannel: {
            id: string;
            type: ServerChannelType;
            name: string;
            topic?: string;
            createdAt: string;
            createdBy: string;
            updatedAt?: string;
            serverId: string;
            rootId?: string;
            parentId?: string;
            messageId?: string;
            categoryId?: number;
            groupId: string;
            visibility?: null | "private" | "public";
            archivedBy?: string;
            archivedAt?: string;
            priority?: number;
        };
        Server: {
            id: string;
            ownerId: string;
            type?: ServerType;
            name: string;
            url?: string;
            about?: string;
            avatar?: string;
            banner?: string;
            timezone?: string;
            isVerified?: boolean;
            defaultChannelId?: string;
            createdAt: string;
        };
        Webhook: {
            id: string;
            name: string;
            avatar?: string;
            serverId: string;
            channelId: string;
            createdAt: string;
            createdBy: string;
            deletedAt?: string;
            token?: string;
        };
        CalendarEvent: {
            id: number;
            serverId: string;
            groupId: string;
            channelId: string;
            name: string;
            description?: string;
            location?: string;
            url?: string;
            color?: number;
            repeats?: boolean;
            seriesId?: string;
            roleIds?: number[];
            rsvpDisabled?: boolean;
            isAllDay?: boolean;
            rsvpLimit?: number;
            autofillWaitlist?: boolean;
            startsAt: string;
            duration?: number;
            isPrivate?: boolean;
            mentions?: components["schemas"]["Mentions"];
            createdAt: string;
            createdBy: string;
            cancellation?: {
                description?: string;
                createdBy: string;
            };
        };
        Emote: {
            id: number;
            name: string;
            url: string;
            serverId?: string;
        };
        CalendarEventRsvp: {
            calendarEventId: number;
            channelId: string;
            serverId: string;
            userId: string;
            status: CalendarEventRsvpStatus;
            createdBy: string;
            createdAt: string;
            updatedBy?: string;
            updatedAt?: string;
        };
        CalendarEventComment: {
            id: number;
            content: string;
            createdAt: string;
            updatedAt?: string;
            calendarEventId: number;
            channelId: string;
            createdBy: string;
            mentions?: components["schemas"]["Mentions"];
        };
        CalendarEventReaction: {
            channelId: string;
            createdBy: string;
            emote: components["schemas"]["Emote"];
            calendarEventId: number;
        };
        CalendarEventCommentReaction: {
            channelId: string;
            createdBy: string;
            emote: components["schemas"]["Emote"];
            calendarEventId: number;
            calendarEventCommentId: number;
        };
        CalendarEventSeries: {
            id: string;
            serverId: string;
            channelId: string;
        };
        Announcement: {
            id: string;
            serverId: string;
            groupId: string;
            channelId: string;
            createdAt: string;
            createdBy: string;
            content: string;
            mentions?: components["schemas"]["Mentions"];
            title: string;
        };
        AnnouncementReaction: {
            channelId: string;
            createdBy: string;
            emote: components["schemas"]["Emote"];
            announcementId: string;
        };
        AnnouncementComment: {
            id: number;
            content: string;
            createdAt: string;
            updatedAt?: string;
            createdBy: string;
            channelId: string;
            announcementId: string;
            mentions?: components["schemas"]["Mentions"];
        };
        AnnouncementCommentReaction: {
            channelId: string;
            createdBy: string;
            emote: components["schemas"]["Emote"];
            announcementId: string;
            announcementCommentId: number;
        };
        Group: {
            id: string;
            serverId: string;
            name: string;
            description?: string;
            avatar?: string;
            isHome?: boolean;
            emoteId?: number;
            isPublic: boolean;
            createdAt: string;
            createdBy: string;
            updatedAt?: string;
            updatedBy?: string;
            archivedAt?: string;
            archivedBy?: string;
        };
        UserStatus: {
            content?: string;
            emoteId: number;
        };
        Role: {
            id: number;
            serverId: string;
            createdAt: string;
            updatedAt?: string;
            name: string;
            isDisplayedSeparately: boolean;
            isSelfAssignable: boolean;
            isMentionable: boolean;
            permissions: string[];
            colors?: number[];
            icon?: string;
            priority?: number;
            isBase: boolean;
            botUserId?: string;
        };
        ServerSubscriptionTier: {
            type: ServerSubscriptionTierType;
            serverId: string;
            description?: string;
            roleId?: number;
            cost: number;
            createdAt: string;
        };
        ServerMemberPermissions: {
            permissions: string[];
        };
        Category: {
            id: number;
            serverId: string;
            groupId: string;
            createdAt: string;
            updatedAt?: string;
            name: string;
            priority?: number;
        };
        ChannelRolePermission: {
            permissions: {
                [key: string]: boolean;
            };
            createdAt: string;
            updatedAt?: string;
            roleId: number;
            channelId: string;
        };
        ChannelUserPermission: {
            permissions: {
                [key: string]: boolean;
            };
            createdAt: string;
            updatedAt?: string;
            userId: string;
            channelId: string;
        };
        ChannelCategoryUserPermission: {
            permissions: {
                [key: string]: boolean;
            };
            createdAt: string;
            updatedAt?: string;
            userId: string;
            categoryId: number;
        };
        ChannelCategoryRolePermission: {
            permissions: {
                [key: string]: boolean;
            };
            createdAt: string;
            updatedAt?: string;
            roleId: number;
            categoryId: number;
        };
        UrlSignature: {
            url: string;
            signature?: string;
            retryAfter?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    ChannelMessageReadMany: {
        parameters: {
            query?: {
                before?: string;
                after?: string;
                limit?: number;
                includePrivate?: boolean;
            };
            header?: never;
            path: {
                channelId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        messages: components["schemas"]["ChatMessage"][];
                    };
                };
            };
        };
    };
    ChannelMessageCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    isPrivate?: boolean;
                    isSilent?: boolean;
                    replyMessageIds?: string[];
                    content?: Record<string, never> | string;
                    hiddenLinkPreviewUrls?: string[];
                    embeds?: components["schemas"]["ChatEmbed"][];
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message: components["schemas"]["ChatMessage"];
                    };
                };
            };
        };
    };
    ChannelMessageRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                messageId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message: components["schemas"]["ChatMessage"];
                    };
                };
            };
        };
    };
    ChannelMessageUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                messageId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    content?: Record<string, never> | string;
                    hiddenLinkPreviewUrls?: string[];
                    embeds?: components["schemas"]["ChatEmbed"][];
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message: {
                            id?: string;
                            type?: PathsChannelsChannelIdMessagesMessageIdPutResponses200ContentApplicationJsonMessageType;
                            serverId?: string;
                            groupId?: string;
                            channelId?: string;
                            content?: string;
                            hiddenLinkPreviewUrls?: string[];
                            embeds?: components["schemas"]["ChatEmbed"][];
                            replyMessageIds?: string[];
                            isPrivate?: boolean;
                            isSilent: boolean;
                            isPinned: boolean;
                            mentions?: components["schemas"]["Mentions"];
                            createdAt?: string;
                            createdBy?: string;
                            createdByWebhookId?: string;
                            updatedAt: string;
                        } & WithRequired<components["schemas"]["ChatMessage"], "updatedAt">;
                    };
                };
            };
        };
    };
    ChannelMessageDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                messageId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GroupMembershipCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupId: string;
                userId: string | PathsGroupsGroupIdMembersUserIdPutParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GroupMembershipDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupId: string;
                userId: string | PathsGroupsGroupIdMembersUserIdDeleteParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServerXpForUserUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                userId: string | PathsServersServerIdMembersUserIdXpPutParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    total: number;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total: number;
                    };
                };
            };
        };
    };
    ServerXpForUserCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                userId: string | PathsServersServerIdMembersUserIdXpPostParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    amount: number;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total: number;
                    };
                };
            };
        };
    };
    ServerXpForUserUpdateMany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    amount: number;
                    userIds: (string | PathsServersServerIdXpPutRequestBodyApplicationJsonUserIds)[];
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        totalsByUserId: {
                            [key: string]: number;
                        };
                    };
                };
            };
        };
    };
    ServerXpForUserCreateMany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    amount: number;
                    userIds: (string | PathsServersServerIdXpPostRequestBodyApplicationJsonUserIds)[];
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        totalsByUserId: {
                            [key: string]: number;
                        };
                    };
                };
            };
        };
    };
    ServerXpForRoleCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                roleId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    amount: number;
                };
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoleMembershipCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                userId: string | PathsServersServerIdMembersUserIdRolesRoleIdPutParametersPathUserId;
                roleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoleMembershipDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                userId: string | PathsServersServerIdMembersUserIdRolesRoleIdDeleteParametersPathUserId;
                roleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoleMembershipReadMany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                userId: string | PathsServersServerIdMembersUserIdRolesGetParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        roleIds: number[];
                    };
                };
            };
        };
    };
    ForumTopicReadMany: {
        parameters: {
            query?: {
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                channelId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        forumTopics: components["schemas"]["ForumTopicSummary"][];
                    };
                };
            };
        };
    };
    ForumTopicCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    title: string;
                    content: Record<string, never> | string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        forumTopic: components["schemas"]["ForumTopic"];
                    };
                };
            };
        };
    };
    ForumTopicRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                forumTopicId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        forumTopic: components["schemas"]["ForumTopic"];
                    };
                };
            };
        };
    };
    ForumTopicDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                forumTopicId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ForumTopicUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                forumTopicId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    title?: string;
                    content?: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        forumTopic: components["schemas"]["ForumTopic"];
                    };
                };
            };
        };
    };
    ForumTopicPin: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                forumTopicId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ForumTopicUnpin: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                forumTopicId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ForumTopicReactionCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                forumTopicId: number;
                emoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ForumTopicReactionDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                forumTopicId: number;
                emoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ForumTopicLock: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                forumTopicId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ForumTopicUnlock: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                forumTopicId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ForumTopicCommentReadMany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                forumTopicId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        forumTopicComments: components["schemas"]["ForumTopicComment"][];
                    };
                };
            };
        };
    };
    ForumTopicCommentCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                forumTopicId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    content: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        forumTopicComment: components["schemas"]["ForumTopicComment"];
                    };
                };
            };
        };
    };
    ForumTopicCommentRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                forumTopicId: number;
                forumTopicCommentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        forumTopicComment: components["schemas"]["ForumTopicComment"];
                    };
                };
            };
        };
    };
    ForumTopicCommentDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                forumTopicId: number;
                forumTopicCommentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ForumTopicCommentUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                forumTopicId: number;
                forumTopicCommentId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    content?: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        forumTopicComment: components["schemas"]["ForumTopicComment"];
                    };
                };
            };
        };
    };
    ListItemReadMany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        listItems: components["schemas"]["ListItemSummary"][];
                    };
                };
            };
        };
    };
    ListItemCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    message: Record<string, never> | string;
                    note?: {
                        content: Record<string, never> | string;
                    };
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        listItem: components["schemas"]["ListItem"];
                    };
                };
            };
        };
    };
    ListItemRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                listItemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        listItem: components["schemas"]["ListItem"];
                    };
                };
            };
        };
    };
    ListItemDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                listItemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ListItemUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                listItemId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    message?: string;
                    note?: {
                        content: string;
                    } | null;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        listItem: components["schemas"]["ListItem"];
                    };
                };
            };
        };
    };
    ListItemCompleteCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                listItemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ListItemCompleteDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                listItemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MemberSocialLinkRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                userId: string | PathsServersServerIdMembersUserIdSocialLinksSocialLinkTypeGetParametersPathUserId;
                socialLinkType: PathsServersServerIdMembersUserIdSocialLinksSocialLinkTypeGetParametersPathSocialLinkType;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        socialLink: components["schemas"]["SocialLink"];
                    };
                };
            };
        };
    };
    MemberNicknameUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                userId: string | PathsServersServerIdMembersUserIdNicknamePutParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    nickname: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        nickname: string;
                    };
                };
            };
        };
    };
    MemberNicknameDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                userId: string | PathsServersServerIdMembersUserIdNicknameDeleteParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChannelCreate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": ({
                    name: string;
                    topic?: string;
                    visibility?: null | "private" | "public";
                    type: PathsChannelsPostRequestBodyApplicationJsonType;
                    serverId?: string;
                    groupId?: string;
                    categoryId?: number;
                    parentId?: string;
                    messageId?: string;
                } & unknown);
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        channel: components["schemas"]["ServerChannel"];
                    };
                };
            };
        };
    };
    ChannelRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        channel: components["schemas"]["ServerChannel"];
                    };
                };
            };
        };
    };
    ChannelDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChannelUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name?: string;
                    topic?: string | null;
                    visibility?: null | "public";
                    priority?: number;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        channel: components["schemas"]["ServerChannel"];
                    };
                };
            };
        };
    };
    DocReadMany: {
        parameters: {
            query?: {
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                channelId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        docs: components["schemas"]["Doc"][];
                    };
                };
            };
        };
    };
    DocCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    title: string;
                    content: Record<string, never> | string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        doc: components["schemas"]["Doc"];
                    };
                };
            };
        };
    };
    DocRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                docId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        doc: components["schemas"]["Doc"];
                    };
                };
            };
        };
    };
    DocUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                docId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    title: string;
                    content: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        doc: components["schemas"]["Doc"];
                    };
                };
            };
        };
    };
    DocDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                docId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServerMemberRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                userId: string | PathsServersServerIdMembersUserIdGetParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        member: components["schemas"]["ServerMember"];
                    };
                };
            };
        };
    };
    ServerMemberDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                userId: string | PathsServersServerIdMembersUserIdDeleteParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServerMemberReadMany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        members: components["schemas"]["ServerMemberSummary"][];
                    };
                };
            };
        };
    };
    ServerMemberBanRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                userId: string | PathsServersServerIdBansUserIdGetParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        serverMemberBan: components["schemas"]["ServerMemberBan"];
                    };
                };
            };
        };
    };
    ServerMemberBanCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                userId: string | PathsServersServerIdBansUserIdPostParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    reason?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        serverMemberBan: components["schemas"]["ServerMemberBan"];
                    };
                };
            };
        };
    };
    ServerMemberBanDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                userId: string | PathsServersServerIdBansUserIdDeleteParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServerMemberBanReadMany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        serverMemberBans: components["schemas"]["ServerMemberBan"][];
                    };
                };
            };
        };
    };
    WebhookReadMany: {
        parameters: {
            query?: {
                channelId?: string;
            };
            header?: never;
            path: {
                serverId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        webhooks: components["schemas"]["Webhook"][];
                    };
                };
            };
        };
    };
    WebhookCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    channelId: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        webhook: components["schemas"]["Webhook"];
                    };
                };
            };
        };
    };
    WebhookRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                webhookId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        webhook: components["schemas"]["Webhook"];
                    };
                };
            };
        };
    };
    WebhookUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                webhookId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    channelId?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        webhook: components["schemas"]["Webhook"];
                    };
                };
            };
        };
    };
    WebhookDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                webhookId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServerRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        server: components["schemas"]["Server"];
                        serverMemberCount: number;
                    };
                };
            };
        };
    };
    CalendarEventReadMany: {
        parameters: {
            query?: {
                before?: string;
                after?: string;
                limit?: number;
            };
            header?: never;
            path: {
                channelId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        calendarEvents: components["schemas"]["CalendarEvent"][];
                    };
                };
            };
        };
    };
    CalendarEventCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    description?: string;
                    location?: string;
                    startsAt?: string;
                    url?: string;
                    color?: number;
                    isAllDay?: boolean;
                    rsvpDisabled?: boolean;
                    rsvpLimit?: number;
                    autofillWaitlist?: boolean;
                    duration?: number;
                    isPrivate?: boolean;
                    roleIds?: number[];
                    repeatInfo?: {
                        type: PathsChannelsChannelIdEventsPostRequestBodyApplicationJsonRepeatInfoType;
                        every?: {
                            count: number;
                            interval: PathsChannelsChannelIdEventsPostRequestBodyApplicationJsonRepeatInfoEveryInterval;
                        };
                        endsAfterOccurrences?: number;
                        endDate?: string;
                        on?: PathsChannelsChannelIdEventsPostRequestBodyApplicationJsonRepeatInfoOn[];
                    };
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        calendarEvent: components["schemas"]["CalendarEvent"];
                    };
                };
            };
        };
    };
    CalendarEventRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                calendarEventId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        calendarEvent: components["schemas"]["CalendarEvent"];
                    };
                };
            };
        };
    };
    CalendarEventDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                calendarEventId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CalendarEventUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                calendarEventId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name?: string;
                    description?: string;
                    location?: string;
                    startsAt?: string;
                    url?: string;
                    color?: number;
                    isAllDay?: boolean;
                    rsvpDisabled?: boolean;
                    rsvpLimit?: number;
                    autofillWaitlist?: boolean;
                    duration?: number;
                    isPrivate?: boolean;
                    roleIds?: number[];
                    cancellation?: {
                        description?: string;
                    };
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        calendarEvent: components["schemas"]["CalendarEvent"];
                    };
                };
            };
        };
    };
    CalendarEventRsvpRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                calendarEventId: number;
                userId: string | PathsChannelsChannelIdEventsCalendarEventIdRsvpsUserIdGetParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        calendarEventRsvp: components["schemas"]["CalendarEventRsvp"];
                    };
                };
            };
        };
    };
    CalendarEventRsvpUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                calendarEventId: number;
                userId: string | PathsChannelsChannelIdEventsCalendarEventIdRsvpsUserIdPutParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    status: PathsChannelsChannelIdEventsCalendarEventIdRsvpsUserIdPutRequestBodyApplicationJsonStatus;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        calendarEventRsvp: components["schemas"]["CalendarEventRsvp"];
                    };
                };
            };
        };
    };
    CalendarEventRsvpDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                calendarEventId: number;
                userId: string | PathsChannelsChannelIdEventsCalendarEventIdRsvpsUserIdDeleteParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CalendarEventRsvpReadMany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                calendarEventId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        calendarEventRsvps: components["schemas"]["CalendarEventRsvp"][];
                    };
                };
            };
        };
    };
    CalendarEventRsvpUpdateMany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                calendarEventId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    userIds: (string | PathsChannelsChannelIdEventsCalendarEventIdRsvpsPutRequestBodyApplicationJsonUserIds)[];
                    status: PathsChannelsChannelIdEventsCalendarEventIdRsvpsPutRequestBodyApplicationJsonStatus;
                };
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string | PathsUsersUserIdGetParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        user: components["schemas"]["User"];
                    };
                };
            };
        };
    };
    ForumTopicCommentReactionCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                forumTopicId: number;
                forumTopicCommentId: number;
                emoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ForumTopicCommentReactionDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                forumTopicId: number;
                forumTopicCommentId: number;
                emoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CalendarEventCommentReadMany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                calendarEventId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        calendarEventComments: components["schemas"]["CalendarEventComment"][];
                    };
                };
            };
        };
    };
    CalendarEventCommentCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                calendarEventId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    content: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        calendarEventComment: components["schemas"]["CalendarEventComment"];
                    };
                };
            };
        };
    };
    CalendarEventCommentRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                calendarEventId: number;
                calendarEventCommentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        calendarEventComment: components["schemas"]["CalendarEventComment"];
                    };
                };
            };
        };
    };
    CalendarEventCommentDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                calendarEventId: number;
                calendarEventCommentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CalendarEventCommentUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                calendarEventId: number;
                calendarEventCommentId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    content: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        calendarEventComment: components["schemas"]["CalendarEventComment"];
                    };
                };
            };
        };
    };
    CalendarEventReactionCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                calendarEventId: number;
                emoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CalendarEventReactionDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                calendarEventId: number;
                emoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CalendarEventCommentReactionCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                calendarEventId: number;
                calendarEventCommentId: number;
                emoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CalendarEventCommentReactionDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                calendarEventId: number;
                calendarEventCommentId: number;
                emoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DocCommentReadMany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                docId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        docComments: components["schemas"]["DocComment"][];
                    };
                };
            };
        };
    };
    DocCommentCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                docId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    content: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        docComment: components["schemas"]["DocComment"];
                    };
                };
            };
        };
    };
    DocCommentRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                docId: number;
                docCommentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        docComment: components["schemas"]["DocComment"];
                    };
                };
            };
        };
    };
    DocCommentDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                docId: number;
                docCommentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DocCommentUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                docId: number;
                docCommentId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    content: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        docComment: components["schemas"]["DocComment"];
                    };
                };
            };
        };
    };
    DocReactionCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                docId: number;
                emoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DocReactionDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                docId: number;
                emoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DocCommentReactionCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                docId: number;
                docCommentId: number;
                emoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DocCommentReactionDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                docId: number;
                docCommentId: number;
                emoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CalendarEventSeriesDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                calendarEventSeriesId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    calendarEventId?: number;
                };
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CalendarEventSeriesUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                calendarEventSeriesId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name?: string;
                    description?: string;
                    location?: string;
                    startsAt?: string;
                    url?: string;
                    color?: number;
                    isAllDay?: boolean;
                    rsvpDisabled?: boolean;
                    rsvpLimit?: number;
                    autofillWaitlist?: boolean;
                    duration?: number;
                    isPrivate?: boolean;
                    roleIds?: number[];
                    repeatInfo?: {
                        type: PathsChannelsChannelIdEvent_seriesCalendarEventSeriesIdPatchRequestBodyApplicationJsonRepeatInfoType;
                        every?: {
                            count: number;
                            interval: PathsChannelsChannelIdEvent_seriesCalendarEventSeriesIdPatchRequestBodyApplicationJsonRepeatInfoEveryInterval;
                        };
                        endsAfterOccurrences?: number;
                        endDate?: string;
                        on?: PathsChannelsChannelIdEvent_seriesCalendarEventSeriesIdPatchRequestBodyApplicationJsonRepeatInfoOn[];
                    };
                    calendarEventId?: number;
                };
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AnnouncementReadMany: {
        parameters: {
            query?: {
                before?: string;
                limit?: number;
            };
            header?: never;
            path: {
                channelId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        announcements: components["schemas"]["Announcement"][];
                    };
                };
            };
        };
    };
    AnnouncementCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    title: string;
                    content: Record<string, never> | string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        announcement: components["schemas"]["Announcement"];
                    };
                };
            };
        };
    };
    AnnouncementRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                announcementId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        announcement: components["schemas"]["Announcement"];
                    };
                };
            };
        };
    };
    AnnouncementDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                announcementId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AnnouncementUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                announcementId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    title?: string;
                    content?: Record<string, never> | string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        announcement: components["schemas"]["Announcement"];
                    };
                };
            };
        };
    };
    UserServerReadMany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string | PathsUsersUserIdServersGetParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        servers: components["schemas"]["Server"][];
                    };
                };
            };
        };
    };
    AnnouncementReactionCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                announcementId: string;
                emoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AnnouncementReactionDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                announcementId: string;
                emoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AnnouncementCommentReadMany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                announcementId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        announcementComments: components["schemas"]["AnnouncementComment"][];
                    };
                };
            };
        };
    };
    AnnouncementCommentCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                announcementId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    content: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        announcementComment: components["schemas"]["AnnouncementComment"];
                    };
                };
            };
        };
    };
    AnnouncementCommentRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                announcementId: string;
                announcementCommentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        announcementComment: components["schemas"]["AnnouncementComment"];
                    };
                };
            };
        };
    };
    AnnouncementCommentDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                announcementId: string;
                announcementCommentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AnnouncementCommentUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                announcementId: string;
                announcementCommentId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    content: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        announcementComment: components["schemas"]["AnnouncementComment"];
                    };
                };
            };
        };
    };
    AnnouncementCommentReactionCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                announcementId: string;
                announcementCommentId: number;
                emoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AnnouncementCommentReactionDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                announcementId: string;
                announcementCommentId: number;
                emoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserStatusCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string | PathsUsersUserIdStatusPutParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    content?: string;
                    emoteId: number;
                    expiresAt?: string;
                };
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserStatusDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string | PathsUsersUserIdStatusDeleteParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChannelMessageReactionCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                messageId: string;
                emoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChannelMessageReactionDelete: {
        parameters: {
            query?: {
                userId?: string | PathsChannelsChannelIdMessagesMessageIdEmotesEmoteIdDeleteParametersQueryUserId;
            };
            header?: never;
            path: {
                channelId: string;
                messageId: string;
                emoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChannelMessageReactionDeleteMany: {
        parameters: {
            query?: {
                emoteId?: number;
            };
            header?: never;
            path: {
                channelId: string;
                messageId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GroupReadMany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        groups: components["schemas"]["Group"][];
                    };
                };
            };
        };
    };
    GroupCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    description?: string;
                    emoteId?: number;
                    isPublic?: boolean;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        group: components["schemas"]["Group"];
                    };
                };
            };
        };
    };
    GroupRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                groupId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        group: components["schemas"]["Group"];
                    };
                };
            };
        };
    };
    GroupDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                groupId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GroupUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                groupId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name?: string;
                    description?: string;
                    emoteId?: number;
                    isPublic?: boolean;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        group: components["schemas"]["Group"];
                    };
                };
            };
        };
    };
    RoleReadMany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        roles: components["schemas"]["Role"][];
                    };
                };
            };
        };
    };
    RoleCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    isDisplayedSeparately?: boolean;
                    isSelfAssignable?: boolean;
                    isMentionable?: boolean;
                    permissions: string[];
                    colors?: number[];
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        role: components["schemas"]["Role"];
                    };
                };
            };
        };
    };
    RoleRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                roleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        role: components["schemas"]["Role"];
                    };
                };
            };
        };
    };
    RoleDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                roleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        role: components["schemas"]["Role"];
                    };
                };
            };
        };
    };
    RoleUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                roleId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name?: string;
                    isDisplayedSeparately?: boolean;
                    isSelfAssignable?: boolean;
                    isMentionable?: boolean;
                    permissions?: string[];
                    priority?: number;
                    colors?: number[];
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        role: components["schemas"]["Role"];
                    };
                };
            };
        };
    };
    RolePermissionUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                roleId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    permissions: Record<string, never>;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        role: components["schemas"]["Role"];
                    };
                };
            };
        };
    };
    ServerSubscriptionTierRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                serverSubscriptionTierType: PathsServersServerIdSubscriptionsTiersServerSubscriptionTierTypeGetParametersPathServerSubscriptionTierType;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        serverSubscriptionTier: components["schemas"]["ServerSubscriptionTier"];
                    };
                };
            };
        };
    };
    ServerSubscriptionTierReadMany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        serverSubscriptionTiers: components["schemas"]["ServerSubscriptionTier"][];
                    };
                };
            };
        };
    };
    ServerMemberPermissionsRead: {
        parameters: {
            query?: {
                ids?: PathsServersServerIdMembersUserIdPermissionsGetParametersQueryIds[];
                channelId?: string;
                categoryId?: number;
            };
            header?: never;
            path: {
                serverId: string;
                userId: string | PathsServersServerIdMembersUserIdPermissionsGetParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        permissions: string[];
                    };
                };
            };
        };
    };
    ChannelArchiveCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChannelArchiveDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CategoryCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    groupId?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        category: components["schemas"]["Category"];
                    };
                };
            };
        };
    };
    CategoryRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                categoryId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        category: components["schemas"]["Category"];
                    };
                };
            };
        };
    };
    CategoryDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                categoryId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        category: components["schemas"]["Category"];
                    };
                };
            };
        };
    };
    CategoryUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                categoryId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name?: string;
                    priority?: number;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        category: components["schemas"]["Category"];
                    };
                };
            };
        };
    };
    ChannelMessagePinCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                messageId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChannelMessagePinDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                messageId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChannelRolePermissionRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                channelId: string;
                roleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        channelRolePermission: components["schemas"]["ChannelRolePermission"];
                    };
                };
            };
        };
    };
    ChannelRolePermissionCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                channelId: string;
                roleId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    permissions: Record<string, never>;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        channelRolePermission: components["schemas"]["ChannelRolePermission"];
                    };
                };
            };
        };
    };
    ChannelRolePermissionDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                channelId: string;
                roleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChannelRolePermissionUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                channelId: string;
                roleId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    permissions: Record<string, never>;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        channelRolePermission: components["schemas"]["ChannelRolePermission"];
                    };
                };
            };
        };
    };
    ChannelRolePermissionReadMany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                channelId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        channelRolePermissions: components["schemas"]["ChannelRolePermission"][];
                    };
                };
            };
        };
    };
    ChannelUserPermissionRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                channelId: string;
                userId: string | PathsServersServerIdChannelsChannelIdPermissionsUsersUserIdGetParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        channelUserPermission: components["schemas"]["ChannelUserPermission"];
                    };
                };
            };
        };
    };
    ChannelUserPermissionCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                channelId: string;
                userId: string | PathsServersServerIdChannelsChannelIdPermissionsUsersUserIdPostParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    permissions: Record<string, never>;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        channelUserPermission: components["schemas"]["ChannelUserPermission"];
                    };
                };
            };
        };
    };
    ChannelUserPermissionDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                channelId: string;
                userId: string | PathsServersServerIdChannelsChannelIdPermissionsUsersUserIdDeleteParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChannelUserPermissionUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                channelId: string;
                userId: string | PathsServersServerIdChannelsChannelIdPermissionsUsersUserIdPatchParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    permissions: Record<string, never>;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        channelUserPermission: components["schemas"]["ChannelUserPermission"];
                    };
                };
            };
        };
    };
    ChannelUserPermissionReadMany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                channelId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        channelUserPermissions: components["schemas"]["ChannelUserPermission"][];
                    };
                };
            };
        };
    };
    ChannelCategoryUserPermissionRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                categoryId: number;
                userId: string | PathsServersServerIdCategoriesCategoryIdPermissionsUsersUserIdGetParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        channelCategoryUserPermission: components["schemas"]["ChannelCategoryUserPermission"];
                    };
                };
            };
        };
    };
    ChannelCategoryUserPermissionCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                categoryId: number;
                userId: string | PathsServersServerIdCategoriesCategoryIdPermissionsUsersUserIdPostParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    permissions: Record<string, never>;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        channelCategoryUserPermission: components["schemas"]["ChannelCategoryUserPermission"];
                    };
                };
            };
        };
    };
    ChannelCategoryUserPermissionDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                categoryId: number;
                userId: string | PathsServersServerIdCategoriesCategoryIdPermissionsUsersUserIdDeleteParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChannelCategoryUserPermissionUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                categoryId: number;
                userId: string | PathsServersServerIdCategoriesCategoryIdPermissionsUsersUserIdPatchParametersPathUserId;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    permissions: Record<string, never>;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        channelCategoryUserPermission: components["schemas"]["ChannelCategoryUserPermission"];
                    };
                };
            };
        };
    };
    ChannelCategoryUserPermissionReadMany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                categoryId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        channelCategoryUserPermissions: components["schemas"]["ChannelCategoryUserPermission"][];
                    };
                };
            };
        };
    };
    ChannelCategoryRolePermissionRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                categoryId: number;
                roleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        channelCategoryRolePermission: components["schemas"]["ChannelCategoryRolePermission"];
                    };
                };
            };
        };
    };
    ChannelCategoryRolePermissionCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                categoryId: number;
                roleId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    permissions: Record<string, never>;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        channelCategoryRolePermission: components["schemas"]["ChannelCategoryRolePermission"];
                    };
                };
            };
        };
    };
    ChannelCategoryRolePermissionDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                categoryId: number;
                roleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChannelCategoryRolePermissionUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                categoryId: number;
                roleId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    permissions: Record<string, never>;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        channelCategoryRolePermission: components["schemas"]["ChannelCategoryRolePermission"];
                    };
                };
            };
        };
    };
    ChannelCategoryRolePermissionReadMany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                categoryId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        channelCategoryRolePermissions: components["schemas"]["ChannelCategoryRolePermission"][];
                    };
                };
            };
        };
    };
    UrlSignatureCreateMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    urls: string[];
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        urlSignatures: components["schemas"]["UrlSignature"][];
                    };
                };
            };
        };
    };
}
export declare enum PathsChannelsChannelIdMessagesMessageIdPutResponses200ContentApplicationJsonMessageType {
    default = "default",
    system = "system"
}
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
export declare enum PathsGroupsGroupIdMembersUserIdPutParametersPathUserId {
    _me = "@me"
}
export declare enum PathsGroupsGroupIdMembersUserIdDeleteParametersPathUserId {
    _me = "@me"
}
export declare enum PathsServersServerIdMembersUserIdXpPutParametersPathUserId {
    _me = "@me"
}
export declare enum PathsServersServerIdMembersUserIdXpPostParametersPathUserId {
    _me = "@me"
}
export declare enum PathsServersServerIdXpPutRequestBodyApplicationJsonUserIds {
    _me = "@me"
}
export declare enum PathsServersServerIdXpPostRequestBodyApplicationJsonUserIds {
    _me = "@me"
}
export declare enum PathsServersServerIdMembersUserIdRolesRoleIdPutParametersPathUserId {
    _me = "@me"
}
export declare enum PathsServersServerIdMembersUserIdRolesRoleIdDeleteParametersPathUserId {
    _me = "@me"
}
export declare enum PathsServersServerIdMembersUserIdRolesGetParametersPathUserId {
    _me = "@me"
}
export declare enum PathsServersServerIdMembersUserIdSocialLinksSocialLinkTypeGetParametersPathUserId {
    _me = "@me"
}
export declare enum PathsServersServerIdMembersUserIdSocialLinksSocialLinkTypeGetParametersPathSocialLinkType {
    twitch = "twitch",
    bnet = "bnet",
    psn = "psn",
    xbox = "xbox",
    steam = "steam",
    origin = "origin",
    youtube = "youtube",
    twitter = "twitter",
    facebook = "facebook",
    switch = "switch",
    patreon = "patreon",
    roblox = "roblox",
    epic = "epic"
}
export declare enum PathsServersServerIdMembersUserIdNicknamePutParametersPathUserId {
    _me = "@me"
}
export declare enum PathsServersServerIdMembersUserIdNicknameDeleteParametersPathUserId {
    _me = "@me"
}
export declare enum PathsChannelsPostRequestBodyApplicationJsonType {
    announcements = "announcements",
    chat = "chat",
    calendar = "calendar",
    forums = "forums",
    media = "media",
    docs = "docs",
    voice = "voice",
    list = "list",
    scheduling = "scheduling",
    stream = "stream"
}
export declare enum PathsServersServerIdMembersUserIdGetParametersPathUserId {
    _me = "@me"
}
export declare enum PathsServersServerIdMembersUserIdDeleteParametersPathUserId {
    _me = "@me"
}
export declare enum PathsServersServerIdBansUserIdGetParametersPathUserId {
    _me = "@me"
}
export declare enum PathsServersServerIdBansUserIdPostParametersPathUserId {
    _me = "@me"
}
export declare enum PathsServersServerIdBansUserIdDeleteParametersPathUserId {
    _me = "@me"
}
export declare enum PathsChannelsChannelIdEventsPostRequestBodyApplicationJsonRepeatInfoType {
    once = "once",
    everyDay = "everyDay",
    everyWeek = "everyWeek",
    everyMonth = "everyMonth",
    custom = "custom"
}
export declare enum PathsChannelsChannelIdEventsPostRequestBodyApplicationJsonRepeatInfoEveryInterval {
    day = "day",
    month = "month",
    year = "year",
    week = "week"
}
export declare enum PathsChannelsChannelIdEventsPostRequestBodyApplicationJsonRepeatInfoOn {
    sunday = "sunday",
    monday = "monday",
    tuesday = "tuesday",
    wednesday = "wednesday",
    thursday = "thursday",
    friday = "friday",
    saturday = "saturday"
}
export declare enum PathsChannelsChannelIdEventsCalendarEventIdRsvpsUserIdGetParametersPathUserId {
    _me = "@me"
}
export declare enum PathsChannelsChannelIdEventsCalendarEventIdRsvpsUserIdPutParametersPathUserId {
    _me = "@me"
}
export declare enum PathsChannelsChannelIdEventsCalendarEventIdRsvpsUserIdPutRequestBodyApplicationJsonStatus {
    going = "going",
    maybe = "maybe",
    declined = "declined",
    invited = "invited"
}
export declare enum PathsChannelsChannelIdEventsCalendarEventIdRsvpsUserIdDeleteParametersPathUserId {
    _me = "@me"
}
export declare enum PathsChannelsChannelIdEventsCalendarEventIdRsvpsPutRequestBodyApplicationJsonUserIds {
    _me = "@me"
}
export declare enum PathsChannelsChannelIdEventsCalendarEventIdRsvpsPutRequestBodyApplicationJsonStatus {
    going = "going",
    maybe = "maybe",
    declined = "declined",
    invited = "invited"
}
export declare enum PathsUsersUserIdGetParametersPathUserId {
    _me = "@me"
}
export declare enum PathsChannelsChannelIdEvent_seriesCalendarEventSeriesIdPatchRequestBodyApplicationJsonRepeatInfoType {
    once = "once",
    everyDay = "everyDay",
    everyWeek = "everyWeek",
    everyMonth = "everyMonth",
    custom = "custom"
}
export declare enum PathsChannelsChannelIdEvent_seriesCalendarEventSeriesIdPatchRequestBodyApplicationJsonRepeatInfoEveryInterval {
    day = "day",
    month = "month",
    year = "year",
    week = "week"
}
export declare enum PathsChannelsChannelIdEvent_seriesCalendarEventSeriesIdPatchRequestBodyApplicationJsonRepeatInfoOn {
    sunday = "sunday",
    monday = "monday",
    tuesday = "tuesday",
    wednesday = "wednesday",
    thursday = "thursday",
    friday = "friday",
    saturday = "saturday"
}
export declare enum PathsUsersUserIdServersGetParametersPathUserId {
    _me = "@me"
}
export declare enum PathsUsersUserIdStatusPutParametersPathUserId {
    _me = "@me"
}
export declare enum PathsUsersUserIdStatusDeleteParametersPathUserId {
    _me = "@me"
}
export declare enum PathsChannelsChannelIdMessagesMessageIdEmotesEmoteIdDeleteParametersQueryUserId {
    _me = "@me"
}
export declare enum PathsServersServerIdSubscriptionsTiersServerSubscriptionTierTypeGetParametersPathServerSubscriptionTierType {
    Gold = "Gold",
    Silver = "Silver",
    Copper = "Copper"
}
export declare enum PathsServersServerIdMembersUserIdPermissionsGetParametersQueryIds {
    CanCreateTopics = "CanCreateTopics",
    CanCreateTopicReplies = "CanCreateTopicReplies",
    CanDeleteTopics = "CanDeleteTopics",
    CanStickyTopics = "CanStickyTopics",
    CanLockTopics = "CanLockTopics",
    CanManageEmotes = "CanManageEmotes",
    CanViewFormResponses = "CanViewFormResponses",
    CanUpdateListItems = "CanUpdateListItems",
    CanManageServerXp = "CanManageServerXp",
    CanCreateThreads = "CanCreateThreads",
    CanCreateThreadMessages = "CanCreateThreadMessages",
    CanManageThreads = "CanManageThreads",
    CanCreateAnnouncements = "CanCreateAnnouncements",
    CanUpdateServer = "CanUpdateServer",
    CanManageRoles = "CanManageRoles",
    CanInviteMembers = "CanInviteMembers",
    CanKickMembers = "CanKickMembers",
    CanManageGroups = "CanManageGroups",
    CanManageChannels = "CanManageChannels",
    CanManageWebhooks = "CanManageWebhooks",
    CanMentionEveryone = "CanMentionEveryone",
    CanModerateChannels = "CanModerateChannels",
    CanBypassSlowMode = "CanBypassSlowMode",
    CanReadApplications = "CanReadApplications",
    CanApproveApplications = "CanApproveApplications",
    CanEditApplicationForm = "CanEditApplicationForm",
    CanIndicateLfmInterest = "CanIndicateLfmInterest",
    CanModifyLfmStatus = "CanModifyLfmStatus",
    CanReadAnnouncements = "CanReadAnnouncements",
    CanManageAnnouncements = "CanManageAnnouncements",
    CanReadChats = "CanReadChats",
    CanCreateChats = "CanCreateChats",
    CanUploadChatMedia = "CanUploadChatMedia",
    CanCreatePrivateMessages = "CanCreatePrivateMessages",
    CanManageChats = "CanManageChats",
    CanReadEvents = "CanReadEvents",
    CanCreateEvents = "CanCreateEvents",
    CanEditEvents = "CanEditEvents",
    CanDeleteEvents = "CanDeleteEvents",
    CanEditEventRsvps = "CanEditEventRsvps",
    CanReadForums = "CanReadForums",
    CanReadDocs = "CanReadDocs",
    CanCreateDocs = "CanCreateDocs",
    CanEditDocs = "CanEditDocs",
    CanDeleteDocs = "CanDeleteDocs",
    CanReadMedia = "CanReadMedia",
    CanAddMedia = "CanAddMedia",
    CanEditMedia = "CanEditMedia",
    CanDeleteMedia = "CanDeleteMedia",
    CanListenVoice = "CanListenVoice",
    CanAddVoice = "CanAddVoice",
    CanManageVoiceGroups = "CanManageVoiceGroups",
    CanAssignVoiceGroup = "CanAssignVoiceGroup",
    CanBroadcastVoice = "CanBroadcastVoice",
    CanDirectVoice = "CanDirectVoice",
    CanPrioritizeVoice = "CanPrioritizeVoice",
    CanUseVoiceActivity = "CanUseVoiceActivity",
    CanMuteMembers = "CanMuteMembers",
    CanDeafenMembers = "CanDeafenMembers",
    CanSendVoiceMessages = "CanSendVoiceMessages",
    CanCreateScrims = "CanCreateScrims",
    CanManageTournaments = "CanManageTournaments",
    CanRegisterForTournaments = "CanRegisterForTournaments",
    CanChangeNickname = "CanChangeNickname",
    CanManageNicknames = "CanManageNicknames",
    CanViewPollResponses = "CanViewPollResponses",
    CanReadListItems = "CanReadListItems",
    CanCreateListItems = "CanCreateListItems",
    CanDeleteListItems = "CanDeleteListItems",
    CanCompleteListItems = "CanCompleteListItems",
    CanReorderListItems = "CanReorderListItems",
    CanViewBracket = "CanViewBracket",
    CanReportScores = "CanReportScores",
    CanReadSchedules = "CanReadSchedules",
    CanCreateSchedule = "CanCreateSchedule",
    CanDeleteSchedule = "CanDeleteSchedule",
    CanManageBots = "CanManageBots",
    CanReadStreams = "CanReadStreams",
    CanJoinStreamVoice = "CanJoinStreamVoice",
    CanCreateStreams = "CanCreateStreams",
    CanSendStreamMessages = "CanSendStreamMessages",
    CanAddStreamVoice = "CanAddStreamVoice",
    CanUseVoiceActivityInStream = "CanUseVoiceActivityInStream",
    CanReceiveAllSocketEvents = "CanReceiveAllSocketEvents"
}
export declare enum PathsServersServerIdMembersUserIdPermissionsGetParametersPathUserId {
    _me = "@me"
}
export declare enum PathsServersServerIdChannelsChannelIdPermissionsUsersUserIdGetParametersPathUserId {
    _me = "@me"
}
export declare enum PathsServersServerIdChannelsChannelIdPermissionsUsersUserIdPostParametersPathUserId {
    _me = "@me"
}
export declare enum PathsServersServerIdChannelsChannelIdPermissionsUsersUserIdDeleteParametersPathUserId {
    _me = "@me"
}
export declare enum PathsServersServerIdChannelsChannelIdPermissionsUsersUserIdPatchParametersPathUserId {
    _me = "@me"
}
export declare enum PathsServersServerIdCategoriesCategoryIdPermissionsUsersUserIdGetParametersPathUserId {
    _me = "@me"
}
export declare enum PathsServersServerIdCategoriesCategoryIdPermissionsUsersUserIdPostParametersPathUserId {
    _me = "@me"
}
export declare enum PathsServersServerIdCategoriesCategoryIdPermissionsUsersUserIdDeleteParametersPathUserId {
    _me = "@me"
}
export declare enum PathsServersServerIdCategoriesCategoryIdPermissionsUsersUserIdPatchParametersPathUserId {
    _me = "@me"
}
export declare enum ChatMessageType {
    default = "default",
    system = "system"
}
export declare enum SocialLinkType {
    twitch = "twitch",
    bnet = "bnet",
    psn = "psn",
    xbox = "xbox",
    steam = "steam",
    origin = "origin",
    youtube = "youtube",
    twitter = "twitter",
    facebook = "facebook",
    switch = "switch",
    patreon = "patreon",
    roblox = "roblox",
    epic = "epic"
}
export declare enum UserType {
    bot = "bot",
    user = "user"
}
export declare enum UserSummaryType {
    bot = "bot",
    user = "user"
}
export declare enum ServerChannelType {
    announcements = "announcements",
    chat = "chat",
    calendar = "calendar",
    forums = "forums",
    media = "media",
    docs = "docs",
    voice = "voice",
    list = "list",
    scheduling = "scheduling",
    stream = "stream"
}
export declare enum ServerType {
    team = "team",
    organization = "organization",
    community = "community",
    clan = "clan",
    guild = "guild",
    friends = "friends",
    streaming = "streaming",
    other = "other"
}
export declare enum CalendarEventRsvpStatus {
    going = "going",
    maybe = "maybe",
    declined = "declined",
    invited = "invited",
    waitlisted = "waitlisted",
    not_responded = "not responded"
}
export declare enum ServerSubscriptionTierType {
    Gold = "Gold",
    Silver = "Silver",
    Copper = "Copper"
}
export {};
//# sourceMappingURL=v1.d.ts.map